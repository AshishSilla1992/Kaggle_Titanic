setwd("C:/Users/ashish.silla/Downloads/TRAINING/R")
#Importing the Data from local system
Titanic_Train <- read.csv("train.csv", stringsAsFactors = FALSE)
Titanic_Test <- read.csv("test.csv", stringsAsFactors = FALSE)

#Doing Sanity Chacks on the data imported
head(Titanic_Train)
names(Titanic_Train)
str(Titanic_Train)
str(Titanic_Test)

#Data cleaning / preparaion

#Adding a extra column to specify the values are from which file
Titanic_Test$IsTrainingSet <- FALSE
Titanic_Train$IsTrainingSet <- TRUE

#Adding the Survived column in the Training data set at the same position
Survived <- NA
Titanic_Test<- cbind(Titanic_Test,Survived)

#Checking the colnames in both the sets matches each other or not
names(Titanic_Test)%in%names(Titanic_Train)

#Combining the both datasets
Titanic_full <- rbind(Titanic_Test, Titanic_Train)
str(Titanic_full)
names(Titanic_full)
tail(Titanic_full)

#Converting back to Facators or also called feature casting after data adjustments
#in the given data set, feature 'Sex', 'Embarked', 'Pclass' should be factors

Titanic_full$Pclass <- as.factor(Titanic_full$Pclass)
Titanic_full$Sex <- as.factor(Titanic_full$Sex)
Titanic_full$Embarked <- as.factor(Titanic_full$Embarked)

#DATA preparton(Dealing with Missing Values) on Embarked, Age and other columns

table(Titanic_full$Embarked)
Titanic_full[Titanic_full$Embarked == '', "Embarked"] <- 'S'


#Age_adj <- median(Titanic_full$Age, na.rm = TRUE) or
#Model to predict missing age values

table(is.na(Titanic_full$Age))
boxplot(Titanic_full$Age)

age_outlier <- boxplot.stats(Titanic_full$Age)$stats[5]
age_filter <- Titanic_full[Titanic_full$Age < age_outlier, ]
names(age_filter)

age_formula <- "Age ~ SibSp + Parch + Sex + Embarked + Fare"
age_model <- lm(age_formula, data = age_filter)

table(is.na(Titanic_full$Age))
age_rows <- Titanic_full[is.na(Titanic_full$Age), c("Fare", "Sex", "SibSp", "Parch", "Embarked")]
age_predict <- predict(age_model, newdata =age_rows )


Titanic_full[is.na(Titanic_full$Age),"Age"] <- age_predict


table(is.na(Titanic_full$Fare))

# fare_adj <- median(Titanic_full$Fare, na.rm = TRUE) or
#Model to predict missing fare values

boxplot(Titanic_full$Fare)
fare_outlier<- boxplot.stats(Titanic_full$Fare)$stats[5]
fare_filter <- Titanic_full[Titanic_full$Fare<fare_outlier, ]



fare_formula <- "Fare ~ Age + Pclass + Sex + SibSp + Parch + Embarked"

fare_model <- lm(formula = fare_formula, data= fare_filter)

fare_rows <- Titanic_full[is.na(Titanic_full$Fare),c("Age", "Pclass", "Sex", "SibSp", "Parch", "Embarked")]

Titanic_full[is.na(Titanic_full$Fare),"Fare"] <- predict(fare_model, newdata = fare_rows)


str(Titanic_full)
table(Titanic_full$Survived)


#Splitting back the whole dataset back into two

Titanic_Test <- Titanic_full[Titanic_full$IsTrainingSet==FALSE, ]
Titanic_Train <- Titanic_full[Titanic_full$IsTrainingSet==TRUE, ]
Titanic_Train$Survived <- as.factor(Titanic_Train$Survived)
Titanic_Test$Survived <- as.factor(Titanic_Test$Survived)

str(Titanic_Test)
str(Titanic_Train)


#Building predictor/model

#selecting the features to build the model
Survived_equation <- formula("Survived ~ Pclass + Sex + Age + Embarked + Fare + SibSp + Parch")

install.packages("randomForest")
library("caret")
library("e1071")

Features_equation <- "Pclass + Sex + Age + Embarked + Fare + SibSp + Parch"

Titanic_Model <- randomForest(Survived_equation, data = Titanic_Train, mtry = 3, nodesize = 0.01*nrow(Titanic_Train))

Survived_Trainin <- predict(Titanic_Model, newdata = Titanic_Train)
Survived_Test <- predict(Titanic_Model, newdata = Titanic_Test)

confusionMatrix(Survived_Trainin, Titanic_Train$Survived)
  


